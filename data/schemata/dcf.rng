<?xml version="1.0" encoding="UTF-8"?>
<grammar xmlns:dcf="https://sourceforge.net/projects/biblatex-biber" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <!--
    The driver control file provides mappings from data source entrytypes and fields to
    biblatex's internal data model. This information is not hard-wired directly into the
    the driver module as it is easier to change things like this. It is also easier
    to document the mappings of a driver by using a generic cross-driver XSLT transform
  -->
  <start>
    <element name="dcf:driver-control">
      <!-- Allowable driver names -->
      <attribute name="driver">
        <choice>
          <value>bibtex</value>
          <value>biblatexml</value>
          <value>ris</value>
          <value>zoterordfxml</value>
          <value>endnotexml</value>
        </choice>
      </attribute>
      <!-- Description of the driver for users -->
      <element name="dcf:description">
        <!-- Free-form description of driver -->
        <element name="dcf:overview">
          <text/>
        </element>
        <optional>
          <!--
            Specific points users should note when using the driver - 
            provides a bit more documentation structure for specific points
          -->
          <element name="dcf:points">
            <oneOrMore>
              <element name="dcf:point">
                <text/>
              </element>
            </oneOrMore>
          </element>
        </optional>
      </element>
      <zeroOrMore>
        <!-- Mappings of data source entrytypes to biblatex entry types -->
        <element name="dcf:entrytypes">
          <oneOrMore>
            <element name="dcf:entrytype">
              <!-- Name of the entrytype in the data source -->
              <attribute name="name">
                <data type="string"/>
              </attribute>
              <!-- Name of the entrytype in biblatex -->
              <element name="dcf:aliasof">
                <data type="string"/>
              </element>
              <zeroOrMore>
                <!--
                  Any other fields to set in an entry when mapping this entrytype
                  For example, we might want to make data source "phdthesis" entrytypes
                  into a biblatex "thesis" entrytype with an "entrysubtype" field of "phd"
                -->
                <element name="dcf:alsoset">
                  <attribute name="target">
                    <data type="string"/>
                  </attribute>
                  <attribute name="value">
                    <data type="string"/>
                  </attribute>
                  <empty/>
                </element>
              </zeroOrMore>
            </element>
          </oneOrMore>
        </element>
      </zeroOrMore>
      <!-- Mappings of data source fields to biblatex fields -->
      <element name="dcf:fields">
        <oneOrMore>
          <element name="dcf:field">
            <!--
              Fields are of three types
              
              1. A name->handler mapping, saying that the biblatex field "name" is handled
                 by the "handler" routine defined in the driver
              2. A name->aliasof mapping, saying that the data source "name" field should
                 be mapped to the biblatex field "aliasof" which is in turn handled by
                 an entry of type 1 above. This is used for field aliases which don't
                 vary between entrytypes (i.e. are global aliases). This is the most
                 common case. For field aliases which are entrytype specific (Endnote
                 does this, for example), see type 3 below.
              3. A name->aliasof(+aliasfortype), giving multiple field mappings for
                 "name". You can specifiy a global mapping like type 2 above by leaving out
                 the "aliasfortype" attribute. You must use this form when you need to
                 specifiy more than one alias mapping for the same name, meaning that
                 you need to specify entrytype specific mappings. For example, if the "isbn"
                 field in the data source maps to biblatex's "isbn" except when it's in a
                 journal article entry and then it should map to biblatex's "issn", you need
                 this form. This may seem like a stupid example but it's exactly what Endnote
                 does in its XML format export.
                 Another use case is when you want to split fields out via aliases. For example,
                 we might want to change a "pubmedid" field into "eprint" and then also set
                 "eprinttype". For this, use the "alsoset" element, just as with entrytype aliases.
              
                 You can also supply a "handler" attribute in this form as the "name"
                 may well be the same as a type 1 entry and this is not allowed. You need
                 to do this in the case mentioned above because "isbn" points directly
                 to a handler (type 1) and also there is a type 3 case for mapping
                 isbn to other fields for some entrytypes. Since you can't have
                 <dcf:field name="isbn"/> twice (XML::LibXML::Simple will rightly complain)
                 you can put the handler attribute on the type 3 tag and remove the type 1
                 case since this will still go to {name => 'name', handler => 'handler'} in
                 the XML::LibXML::Simple parse.
                 See the title and isbn fields in .dcf for the Endnote XML driver
            -->
            <choice>
              <group>
                <attribute name="name">
                  <data type="string"/>
                </attribute>
                <choice>
                  <attribute name="handler">
                    <data type="string"/>
                  </attribute>
                  <!-- type 1 above -->
                  <group>
                    <attribute name="aliasof">
                      <data type="string"/>
                    </attribute>
                  </group>
                </choice>
                <!-- type 2 above -->
                <empty/>
              </group>
              <group>
                <attribute name="name">
                  <data type="string"/>
                </attribute>
                <optional>
                  <!-- type 3 above -->
                  <attribute name="handler">
                    <data type="string"/>
                  </attribute>
                </optional>
                <oneOrMore>
                  <element name="dcf:alias">
                    <attribute name="aliasof">
                      <data type="string"/>
                    </attribute>
                    <optional>
                      <!--
                        The entrytype value here is the type in the original data source
                        not the biblatex type
                      -->
                      <attribute name="aliasfortype">
                        <data type="string"/>
                      </attribute>
                    </optional>
                    <zeroOrMore>
                      <!-- Any other fields to create when resolving this alias -->
                      <element name="dcf:alsoset">
                        <attribute name="target">
                          <data type="string"/>
                        </attribute>
                        <optional>
                          <!--
                            If value is not set, the code uses the name of the original field
                            to automate this:
                            origfield=X -> origfieldalias=X, alsosetfield='origfield'
                          -->
                          <attribute name="value">
                            <data type="string"/>
                          </attribute>
                        </optional>
                        <empty/>
                      </element>
                    </zeroOrMore>
                  </element>
                </oneOrMore>
              </group>
            </choice>
          </element>
        </oneOrMore>
      </element>
    </element>
  </start>
</grammar>
