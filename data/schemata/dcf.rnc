namespace dcf = "https://sourceforge.net/projects/biblatex-biber"
# The driver control file provides mappings from data source entrytypes and fields to
# biblatex's internal data model. This information is not hard-wired directly into the
# the driver module as it is easier to change things like this. It is also easier
# to document the mappings of a driver by using a generic cross-driver XSLT transform

start =
  element dcf:driver-control {
    # Allowable driver names
    attribute driver { "bibtex" | "biblatexml" | "ris" | "zoterordfxml" | "endnotexml" },
    # Description of the driver for users
    element dcf:description {
      # Free-form description of driver
      element dcf:overview { text },
      # Specific points users should note when using the driver - 
      # provides a bit more documentation structure for specific points
      element dcf:points {
        element dcf:point { text }+
      }?
    },
    # Mappings of data source entrytypes to biblatex entry types
    element dcf:entrytypes {
      element dcf:entrytype {
        # Name of the entrytype in the data source
        attribute name { xsd:string },
        # Name of the entrytype in biblatex
        element dcf:aliasof { xsd:string },
        # Any other fields to set in an entry when mapping this entrytype
        # For example, we might want to make data source "phdthesis" entrytypes
        # into a biblatex "thesis" entrytype with an "entrysubtype" field of "phd"
        element dcf:alsoset {
          attribute target { xsd:string },
          attribute value { xsd:string },
          empty
        }*
      }+
    }*,
    # Mappings of data source fields to biblatex fields
    element dcf:fields {
      element dcf:field {
        # Fields are of three types
        #
        # 1. A name->handler mapping, saying that the biblatex field "name" is handled
        #    by the "handler" routine defined in the driver
        # 2. A name->aliasof mapping, saying that the data source "name" field should
        #    be mapped to the biblatex field "aliasof" which is in turn handled by
        #    an entry of type 1 above. This is used for field aliases which don't
        #    vary between entrytypes (i.e. are global aliases). This is the most
        #    common case. For field aliases which are entrytype specific (Endnote
        #    does this, for example), see type 3 below.
        # 3. A name->aliasof(+aliasfortype), giving multiple field mappings for
        #    "name". You can specifiy a global mapping like type 2 above by leaving out
        #    the "aliasfortype" attribute. You must use this form when you need to
        #    specify more than one alias mapping for the same name, meaning that
        #    you need to specify entrytype specific mappings. For example, if the "isbn"
        #    field in the data source maps to biblatex's "isbn" except when it's in a
        #    journal article entry and then it should map to biblatex's "issn", you need
        #    this form. This may seem like a stupid example but it's exactly what Endnote
        #    does in its XML format export.
        #    Another use case is when you want to split fields out via aliases. For example,
        #    we might want to change a "pubmedid" field into "eprint" and then also set
        #    "eprinttype". For this, use the "alsoset" element, just as with entrytype aliases.
        # 
        #    You can also supply a "handler" attribute in this form as the "name"
        #    may well be the same as a type 1 entry and this is not allowed. You need
        #    to do this in the case mentioned above because "isbn" points directly
        #    to a handler (type 1) and also there is a type 3 case for mapping
        #    isbn to other fields for some entrytypes. Since you can't have
        #    <dcf:field name="isbn"/> twice (XML::LibXML::Simple will rightly complain)
        #    you can put the handler attribute on the type 3 tag and remove the type 1
        #    case since this will still go to {name => 'name', handler => 'handler'} in
        #    the XML::LibXML::Simple parse.
        #    See the title and isbn fields in .dcf for the Endnote XML driver
        ((attribute name { xsd:string },
          (attribute handler { xsd:string } | # type 1 above
            (attribute aliasof { xsd:string })), # type 2 above
          empty ) |
            (attribute name { xsd:string }, # type 3 above
             attribute handler { xsd:string }?,
              element dcf:alias {
                attribute aliasof { xsd:string },
                # The entrytype value here is the type in the original data source
                # not the biblatex type
                attribute aliasfortype { xsd:string }?,
                # Any other fields to create when resolving this alias
                element dcf:alsoset {
                  attribute target { xsd:string },
                  # If value is not set, the code uses the name of the original field
                  # to automate this:
                  # origfield=X -> origfieldalias=X, alsosetfield='origfield'
                  attribute value { xsd:string }?,
                  empty
                }*
              }+
            ))
        }+
    }
  }
