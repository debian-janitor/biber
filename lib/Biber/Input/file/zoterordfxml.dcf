<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="../../../../data/schemata/dcf.rnc" type="compact"?>
<?xml-stylesheet type="text/xsl" href="../../../../data/dcf.xsl"?>
<dcf:driver-control driver="zoterordfxml" xmlns:dcf="https://sourceforge.net/projects/biblatex-biber">
  <dcf:description>
    <dcf:overview>The Zotero RDF/XML data source driver is based on the Zotero 2.0.9 RDF/XML output routines and data model. It is not really designed with typesetting in mind and so the data model is quite a bit more coarse-grained than, for example, the bibtex driver model. Many fields are verbatim copies via a field alias but the following are handled by the driver as special cases:</dcf:overview>
    <dcf:points>
      <dcf:point>To use this driver, you'll need to export your Zotero data as "Zotero RDF" using the Zotero GUI</dcf:point>
      <dcf:point>The biggest issue with Zotero for biblatex/biber is that it doesn't really have a notion of entry keys. The 'key' for a Zotero entry is usually one of the entry fields which is deemed to uniquely identify that entry. This means that changing the data in an entry can change the key. If there is no identifying field to use as a key, Zotero makes one when exporting, usually in the format '#item_nnnn' where 'nnnn' is the internal Zotero entry ID number. This format breaks LaTeX because of the hash character however - you can cite such entries using the auto-generated key, just omit the '#' when you do. In general, if the Zotero 'key' is a URI or similar, it may well be completely impossible to use with biblatex/biber as it could contain all sorts of LaTeX special chars. In Zotero RDF/XML, the 'key' is found in the 'rdf:about' attribute of the entry. It is expected that Zotero 2.2 will add a user-visible and definable citation key field and this will make things considerably easier.</dcf:point>
      <dcf:point>Zotero name support is fairly coarse, just family and given names. No attempt is made to parse out prefices or suffices as this would be horribly messy.</dcf:point>
      <dcf:point>The only biblatex date field supported is 'date' (parsed into year/month/day fields) since Zotero doesn't allow any other sorts of date. Your dates should be basically ISO8601 standard. Biblatex date ranges are supported. See the biblatex manual about the format--it's very standard and won't cause you any problems with other applications.</dcf:point>
      <dcf:point>Biber will automatically create 'dataonly' crossreference parents when it encounters a Zotero 'dcterms:isPartOf' element (corresponding to Zotero sections like BookPart etc.). This means that entries will inherit fields correctly according to the defined biblatex inheritance scheme.</dcf:point>
      <dcf:point>The biblatex 'location' field will be populated from the publisher '/vcard:adr/vcard:Address/vcard:locality' value (Zotero interface 'Place'), if it exists.</dcf:point>
      <dcf:point>The biblatex 'eventtitle' field will be populated from the 'bib:presentedAt/bib:Conference/dc:title' (Zotero interface 'Conference Name'), if it exists.</dcf:point>
      <dcf:point>The biblatex 'library' field will be populated from the 'dc:subject/dcterms:LCC' value (Zotero interface 'Call Number') and if this does not exist, from the 'z:libraryCatalog' value (Zotero interface 'Library Catalog'), if that exists.</dcf:point>
      <dcf:point>Biber will parse 'dc:identifier' values in order to create valid biblatex issn, isbn, doi or url fields.</dcf:point>
      <dcf:point>'dc:subject' fields will become biblatex keywords. However, because 'dc:subject' may contain arbitrary text, when you refer to these in, for example, \printbibliography[keyword=...], you should wrap any messy keywords in braces, e.g. \printbibliography[keyword={some long keyword, with commas}]. biblatex will likely die if you don't as the keywords field is a CSV and intended for, well, single words.</dcf:point>
      <dcf:point>Biber will try to escape LaTeX special chars in fields in order to make the .bbl valid. This can't be guaranteed as many Zotero DBs contain all sorts of special chars which it is impossible to guess. Try to make your Zotero data LaTeX friendly ...</dcf:point>
    </dcf:points>
    <dcf:point>There are no warnings when field aliasing (mapping) stomps on existing fields. Reliable warnings are pretty much impossible to implement because of the disparity between the data models involved. The result when you try to alias a field X (zotero RDF data model) to field Y (biblatex data model) is unpredictable when field Y is also mapped via another source model field. Generally, the latest setting of field Y will win.</dcf:point>
    <dcf:point>Regexp alteration of field contents is limited with this
    driver due to the fact that the data model is messy.</dcf:point>
  </dcf:description>
  <!--
      These entry type aliases we might find in the the datasource so
      we can decide how to map and convert them into Biber::Entry objects
      We are not validating anything here, that comes later and is not
      datasource specific
  -->
  <dcf:entrytypes>
    <dcf:entrytype name="conferencePaper">
      <dcf:aliasof>inproceedings</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="bookSection">
      <dcf:aliasof>inbook</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="journalArticle">
      <dcf:aliasof>article</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="magazineArticle">
      <dcf:aliasof>article</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="newspaperArticle">
      <dcf:aliasof>article</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="encyclopediaArticle">
      <dcf:aliasof>inreference</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="manuscript">
      <dcf:aliasof>unpublished</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="document">
      <dcf:aliasof>misc</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="dictionaryEntry">
      <dcf:aliasof>inreference</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="interview">
      <dcf:aliasof>misc</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="film">
      <dcf:aliasof>movie</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="webpage">
      <dcf:aliasof>online</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="note">
      <dcf:aliasof>misc</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="attachment">
      <dcf:aliasof>misc</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="bill">
      <dcf:aliasof>legislation</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="case">
      <dcf:aliasof>jurisdiction</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="hearing">
      <dcf:aliasof>jurisdiction</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="statute">
      <dcf:aliasof>legislation</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="email">
      <dcf:aliasof>letter</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="map">
      <dcf:aliasof>image</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="blogPost">
      <dcf:aliasof>online</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="instantMessage">
      <dcf:aliasof>letter</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="forumPost">
      <dcf:aliasof>online</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="audioRecording">
      <dcf:aliasof>audio</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="presentation">
      <dcf:aliasof>inproceedings</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="videoRecording">
      <dcf:aliasof>video</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="tvBroadcast">
      <dcf:aliasof>misc</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="radioBroadcast">
      <dcf:aliasof>misc</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="podcast">
      <dcf:aliasof>online</dcf:aliasof>
    </dcf:entrytype>
    <dcf:entrytype name="computerProgram">
      <dcf:aliasof>software</dcf:aliasof>
    </dcf:entrytype>
  </dcf:entrytypes>
  <!--
    These are the fields we expect to find in the the datasource so
    we can decide how to map and convert them into Biber::Entry fields
    This has nothing conceptually to do with the internal structure
    setup, it's a datasource driver specific set of settings to allow
    parsing into internal objects.

  -->
  <dcf:fields>

    <!-- ignored fields 

    z:legislativeBody
    z:history
    z:court
    z:committee
    z:assignee
    z:priorityNumbers
    z:references
    z:legalStatus
    z:codePages
    z:codeVolume
    z:programmingLanguage
    z:system
    z:network
    z:runningTime
    z:studio
    z:audioRecordingFormat
    z:videoRecordingFormat
    z:scale
    z:interviewMedium
    z:artworkSize
    z:artworkMedium
    z:dateDecided
    z:reporterVolume
    dc:source
    dc:rights
    dcterms:issued
    link:type
    link:charset
    dcterms:medium
    dcterms:dateSubmitted
    z:code
    z:session
    z:archive
    z:genre
    z:filingDate
    z:issuingAuthority
    z:programTitle
    z:docketNumber
    z:country
    z:dateEnacted
    z:firstPage
    z:interviewee
    z:castMember
    z:sponsor
    z:attorneyAgent
    z:wordsBy
    z:cartographer
    z:guest
    z:reviewedAuthor
    z:cosponsor

    -->

    <!-- special fields -->
    <dcf:field name="dcterms:isPartOf" handler="partof"/>
    <dcf:field name="dc:publisher" handler="publisher"/>
    <dcf:field name="dc:identifier" handler="identifier"/>
    <dcf:field name="bib:presentedAt" handler="presentedat"/>
    <dcf:field name="dc:subject" handler="subject"/>

    <!-- name fields -->
    <dcf:field name="bib:contributors" aliasof="author"/>
    <dcf:field name="bib:authors" aliasof="author"/>
    <dcf:field name="z:interviewers" aliasof="author"/>
    <dcf:field name="z:directors" aliasof="author"/>
    <dcf:field name="z:scriptwriters" aliasof="author"/>
    <dcf:field name="z:bookAuthor" aliasof="author"/>
    <dcf:field name="z:inventors" aliasof="author"/>
    <dcf:field name="z:recipients" aliasof="author"/>
    <dcf:field name="z:counsels" aliasof="author"/>
    <dcf:field name="z:artists" aliasof="author"/>
    <dcf:field name="z:podcasters" aliasof="author"/>
    <dcf:field name="z:presenters" aliasof="author"/>
    <dcf:field name="z:commenters" aliasof="author"/>
    <dcf:field name="z:programers" aliasof="author"/>
    <dcf:field name="z:composers" aliasof="author"/>
    <dcf:field name="z:producers" aliasof="author"/>
    <dcf:field name="z:performers" aliasof="author"/>
    <dcf:field name="bib:editors" aliasof="editor"/>
    <dcf:field name="z:translators" aliasof="translator"/>
    <dcf:field name="z:seriesEditors" aliasof="editor"/>
    <dcf:field name="author" handler="name"/>
    <dcf:field name="editor" handler="name"/>
    <dcf:field name="translator" handler="name"/>

    <!-- date fields -->
    <dcf:field name="dc:date" aliasof="date"/>
    <dcf:field name="date" handler="date"/>

    <!-- range fields -->
    <dcf:field name="bib:pages" aliasof="pages"/>
    <dcf:field name="pages" handler="range"/>

    <!-- literal fields -->
    <dcf:field name="dc:title" aliasof="title"/>
    <dcf:field name="z:proceedingsTitle" aliasof="title"/>
    <dcf:field name="z:encyclopediaTitle" aliasof="title"/>
    <dcf:field name="z:dictionaryTitle" aliasof="title"/>
    <dcf:field name="z:websiteTitle" aliasof="title"/>
    <dcf:field name="z:forumTitle" aliasof="title"/>
    <dcf:field name="z:blogTitle" aliasof="title"/>
    <dcf:field name="z:nameOfAct" aliasof="title"/>
    <dcf:field name="z:caseName" aliasof="title"/>
    <dcf:field name="title" handler="literal"/>
    <dcf:field name="z:meetingName" aliasof="eventtitle"/>
    <dcf:field name="eventtitle" handler="literal"/>
    <dcf:field name="prism:volume" aliasof="volume"/>
    <dcf:field name="volume" handler="literal"/>
    <dcf:field name="numberOfVolumes" aliasof="volumes"/>
    <dcf:field name="volumes" handler="literal"/>
    <dcf:field name="z:numPages" aliasof="pagetotal"/>
    <dcf:field name="pagetotal" handler="literal"/>
    <dcf:field name="prism:edition" aliasof="edition"/>
    <dcf:field name="edition" handler="literal"/>
    <dcf:field name="dc:description" aliasof="note"/>
    <dcf:field name="note" handler="literal"/>
    <dcf:field name="dc:alternative" aliasof="shortjournal"/>
    <dcf:field name="shortjournal" handler="literal"/>
    <dcf:field name="dcterms:abstract" aliasof="abstract"/>
    <dcf:field name="abstract" handler="literal"/>
    <dcf:field name="dc:type" aliasof="type"/>
    <dcf:field name="type" handler="literal"/>
    <dcf:field name="z:shortTitle" aliasof="shorttitle"/>
    <dcf:field name="shorttitle" handler="literal"/>
    <dcf:field name="z:bookTitle" aliasof="booktitle"/>
    <dcf:field name="booktitle" handler="literal"/>
    <dcf:field name="prism:number" aliasof="number"/>
    <dcf:field name="z:patentNumber" aliasof="number"/>
    <dcf:field name="z:codeNumber" aliasof="number"/>
    <dcf:field name="z:reportNumber" aliasof="number"/>
    <dcf:field name="z:billNumber" aliasof="number"/>
    <dcf:field name="z:documentNumber" aliasof="number"/>
    <dcf:field name="z:publicLawNumber" aliasof="number"/>
    <dcf:field name="z:applicationNumber" aliasof="number"/>
    <dcf:field name="z:episodeNumber" aliasof="number"/>
    <dcf:field name="number" handler="literal"/>
    <dcf:field name="dc:coverage" aliasof="location"/>
    <dcf:field name="location" handler="literal"/>
    <dcf:field name="z:university" aliasof="institution"/>
    <dcf:field name="institution" handler="list"/>
    <dcf:field name="z:language" aliasof="language"/>
    <dcf:field name="language" handler="list"/>
    <dcf:field name="z:version" aliasof="version"/>
    <dcf:field name="version" handler="literal"/>
    <dcf:field name="z:libraryCatalog" aliasof="library"/>
    <dcf:field name="library" handler="literal"/>
  </dcf:fields>
</dcf:driver-control>

